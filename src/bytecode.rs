use std::borrow::Cow;
use std::rc::Rc;

use crate::{read_u1, read_u2, read_u4, ParseError};
use crate::constant_pool::{read_cp_classinfo, read_cp_fieldref, FieldRef, ConstantPoolEntry};

#[derive(Debug)]
pub enum Opcode<'a> {
    Aaload,
    Aastore,
    AconstNull,
    Aload(u8),
    Anewarray(Cow<'a, str>),
    Areturn,
    Arraylength,
    Astore(u8),
    Athrow,
    Baload,
    Bastore,
    Bipush(u8),
    Breakpoint,
    Caload,
    Castore,
    Checkcast(Cow<'a, str>),
    D2f,
    D2i,
    D2l,
    Dadd,
    Daload,
    Dastore,
    Dcmpg,
    Dcmpl,
    Dconst0,
    Dconst1,
    Ddiv,
    Dload(u8),
    Dmul,
    Dneg,
    Drem,
    Dreturn,
    Dstore(u8),
    Dsub,
    Dup,
    DupX1,
    DupX2,
    Dup2,
    Dup2X1,
    Dup2X2,
    F2d,
    F2i,
    F2l,
    Fadd,
    Faload,
    Fastore,
    Fcmpg,
    Fcmpl,
    Fconst0,
    Fconst1,
    Fconst2,
    Fdiv,
    Fload(u8),
    Fmul,
    Fneg,
    Frem,
    Freturn,
    Fstore(u8),
    Fsub,
    Getfield(FieldRef<'a>),
    Getstatic(FieldRef<'a>),
    Goto(u16),
    Gotow(u32),
    I2b,
    I2c,
    I2d,
    I2f,
    I2l,
    I2s,
    Iadd,
    Iaload,
    Iand,
    Iastore,
    IconstM1,
    Iconst0,
    Iconst1,
    Iconst2,
    Iconst3,
    Iconst4,
    Iconst5,
    Idiv,
    IfAcmpeq(u16),
    IfAcmpne(u16),
    IfIcmpeq(u16),
    IfIcmpge(u16),
    IfIcmpgt(u16),
    IfIcmple(u16),
    IfIcmplt(u16),
    IfIcmpne(u16),
    Ifeq(u16),
    Ifge(u16),
    Ifgt(u16),
    Ifle(u16),
    Iflt(u16),
    Ifne(u16),
    Ifnonnull(u16),
    Ifnull(u16),
    Iinc(u8, u8),
    Iload(u8),
    Impdep1,
    Impdep2,
    Imul,
    Ineg,
    Instanceof(Cow<'a, str>),
    // TODO: finish this
}

#[derive(Debug)]
pub struct ByteCode<'a> {
    pub opcodes: Vec<Opcode<'a>>,
}

pub(crate) fn read_opcodes<'a>(code: &'a [u8], pool: &[Rc<ConstantPoolEntry<'a>>]) -> Result<Vec<Opcode<'a>>, ParseError> {
    let mut opcodes = Vec::new();
    let mut ix = 0;
    while ix < code.len() {
        let opcode = match read_u1(code, &mut ix)? {
            0x01 => Opcode::AconstNull,
            0x02 => Opcode::IconstM1,
            0x03 => Opcode::Iconst0,
            0x04 => Opcode::Iconst1,
            0x05 => Opcode::Iconst2,
            0x06 => Opcode::Iconst3,
            0x07 => Opcode::Iconst4,
            0x08 => Opcode::Iconst5,
            0x0b => Opcode::Fconst0,
            0x0c => Opcode::Fconst1,
            0x0d => Opcode::Fconst2,
            0x0e => Opcode::Dconst0,
            0x0f => Opcode::Dconst1,
            0x10 => Opcode::Bipush(read_u1(code, &mut ix)?),
            0x15 => Opcode::Iload(read_u1(code, &mut ix)?),
            0x17 => Opcode::Fload(read_u1(code, &mut ix)?),
            0x18 => Opcode::Dload(read_u1(code, &mut ix)?),
            0x19 => Opcode::Aload(read_u1(code, &mut ix)?),
            0x1a => Opcode::Iload(0),
            0x1b => Opcode::Iload(1),
            0x1c => Opcode::Iload(2),
            0x1d => Opcode::Iload(3),
            0x22 => Opcode::Fload(0),
            0x23 => Opcode::Fload(1),
            0x24 => Opcode::Fload(2),
            0x25 => Opcode::Fload(3),
            0x26 => Opcode::Dload(0),
            0x27 => Opcode::Dload(1),
            0x28 => Opcode::Dload(2),
            0x29 => Opcode::Dload(3),
            0x2a => Opcode::Aload(0),
            0x2b => Opcode::Aload(1),
            0x2c => Opcode::Aload(2),
            0x2d => Opcode::Aload(3),
            0x2e => Opcode::Iaload,
            0x30 => Opcode::Faload,
            0x31 => Opcode::Daload,
            0x32 => Opcode::Aaload,
            0x33 => Opcode::Baload,
            0x34 => Opcode::Caload,
            0x38 => Opcode::Fstore(read_u1(code, &mut ix)?),
            0x39 => Opcode::Dstore(read_u1(code, &mut ix)?),
            0x3a => Opcode::Astore(read_u1(code, &mut ix)?),
            0x43 => Opcode::Fstore(0),
            0x44 => Opcode::Fstore(1),
            0x45 => Opcode::Fstore(2),
            0x46 => Opcode::Fstore(3),
            0x47 => Opcode::Dstore(0),
            0x48 => Opcode::Dstore(1),
            0x49 => Opcode::Dstore(2),
            0x4a => Opcode::Dstore(3),
            0x4b => Opcode::Astore(0),
            0x4c => Opcode::Astore(1),
            0x4d => Opcode::Astore(2),
            0x4e => Opcode::Astore(3),
            0x4f => Opcode::Iastore,
            0x51 => Opcode::Fastore,
            0x52 => Opcode::Dastore,
            0x53 => Opcode::Aastore,
            0x54 => Opcode::Bastore,
            0x55 => Opcode::Castore,
            0x59 => Opcode::Dup,
            0x5a => Opcode::DupX1,
            0x5b => Opcode::DupX2,
            0x5c => Opcode::Dup2,
            0x5d => Opcode::Dup2X1,
            0x5e => Opcode::Dup2X2,
            0x60 => Opcode::Iadd,
            0x62 => Opcode::Fadd,
            0x63 => Opcode::Dadd,
            0x66 => Opcode::Fsub,
            0x67 => Opcode::Dsub,
            0x68 => Opcode::Imul,
            0x6a => Opcode::Fmul,
            0x6b => Opcode::Dmul,
            0x6c => Opcode::Idiv,
            0x6e => Opcode::Fdiv,
            0x6f => Opcode::Ddiv,
            0x72 => Opcode::Frem,
            0x73 => Opcode::Drem,
            0x74 => Opcode::Ineg,
            0x76 => Opcode::Fneg,
            0x77 => Opcode::Dneg,
            0x7e => Opcode::Iand,
            0x84 => Opcode::Iinc(read_u1(code, &mut ix)?, read_u1(code, &mut ix)?),
            0x85 => Opcode::I2l,
            0x86 => Opcode::I2f,
            0x87 => Opcode::I2d,
            0x8b => Opcode::F2i,
            0x8c => Opcode::F2l,
            0x8d => Opcode::F2d,
            0x8e => Opcode::D2i,
            0x8f => Opcode::D2l,
            0x90 => Opcode::D2f,
            0x91 => Opcode::I2b,
            0x92 => Opcode::I2c,
            0x93 => Opcode::I2s,
            0x95 => Opcode::Fcmpl,
            0x96 => Opcode::Fcmpg,
            0x97 => Opcode::Dcmpl,
            0x98 => Opcode::Dcmpg,
            0x99 => Opcode::Ifeq(read_u2(code, &mut ix)?),
            0x9a => Opcode::Ifne(read_u2(code, &mut ix)?),
            0x9b => Opcode::Iflt(read_u2(code, &mut ix)?),
            0x9c => Opcode::Ifge(read_u2(code, &mut ix)?),
            0x9d => Opcode::Ifgt(read_u2(code, &mut ix)?),
            0x9e => Opcode::Ifle(read_u2(code, &mut ix)?),
            0x9f => Opcode::IfIcmpeq(read_u2(code, &mut ix)?),
            0xa0 => Opcode::IfIcmpne(read_u2(code, &mut ix)?),
            0xa1 => Opcode::IfIcmplt(read_u2(code, &mut ix)?),
            0xa2 => Opcode::IfIcmpge(read_u2(code, &mut ix)?),
            0xa3 => Opcode::IfIcmpgt(read_u2(code, &mut ix)?),
            0xa4 => Opcode::IfIcmple(read_u2(code, &mut ix)?),
            0xa5 => Opcode::IfAcmpeq(read_u2(code, &mut ix)?),
            0xa6 => Opcode::IfAcmpne(read_u2(code, &mut ix)?),
            0xa7 => Opcode::Goto(read_u2(code, &mut ix)?),
            0xae => Opcode::Freturn,
            0xaf => Opcode::Dreturn,
            0xb0 => Opcode::Areturn,
            0xb2 => Opcode::Getstatic(read_cp_fieldref(code, &mut ix, pool)?),
            0xb4 => Opcode::Getfield(read_cp_fieldref(code, &mut ix, pool)?),
            0xbd => Opcode::Anewarray(read_cp_classinfo(code, &mut ix, pool)?),
            0xbe => Opcode::Arraylength,
            0xbf => Opcode::Athrow,
            0xc0 => Opcode::Checkcast(read_cp_classinfo(code, &mut ix, pool)?),
            0xc1 => Opcode::Instanceof(read_cp_classinfo(code, &mut ix, pool)?),
            0xc6 => Opcode::Ifnull(read_u2(code, &mut ix)?),
            0xc7 => Opcode::Ifnonnull(read_u2(code, &mut ix)?),
            0xc8 => Opcode::Gotow(read_u4(code, &mut ix)?),
            0xca => Opcode::Breakpoint,
            0xfe => Opcode::Impdep1,
            0xff => Opcode::Impdep2,
            _ => continue,
        };
        opcodes.push(opcode);
    }
    Ok(opcodes)
}
